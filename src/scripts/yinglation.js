import { getOptions } from './utils/jsTools.js';
import { postFunction } from './utils/mutation.js';

const customAttribute = 'ch-utils-yinglation';
let reverseMode
let phenome = 'zh';
let regex = /(\w*(?:zh)\w*)/gi;
let map = {
  'zhe': 'the',
  'zhat': 'that',
  'zhis': 'this',
  'wizh': 'with',
  'ozher': 'other',
  'zhey': 'they',
  'zheir': 'their',
  'zhere': 'there',
  'zhese': 'these',
  'zhan': 'than',
  'healzh': 'health',
  'zhem': 'them',
  'zhen': 'then',
  'zhrough': 'through',
  'zhose': 'those',
  'wizhin': 'within',
  'souzh': 'south',
  'bozh': 'both',
  'zhree': 'three',
  'wizhout': 'without',
  'zhink': 'think',
  'norzh': 'north',
  'anozher': 'another',
  'auzhor': 'author',
  'zhread': 'thread',
  'zhings': 'things',
  'somezhing': 'something',
  'monzh': 'month',
  'ozhers': 'others',
  'monzhs': 'months',
  'furzher': 'further',
  'whezher': 'whether',
  'weazher': 'weather',
  'eizher': 'either',
  'zhing': 'thing',
  'zhird': 'third',
  'togezher': 'together',
  'zhough': 'though',
  'zhanks': 'thanks',
  'everyzhing': 'everything',
  'mezhods': 'methods',
  'mezhod': 'method',
  'deazh': 'death',
  'zhought': 'thought',
  'growzh': 'growth',
  'alzhough': 'although',
  'anyzhing': 'anything',
  'razher': 'rather',
  'nozhing': 'nothing',
  'clozhing': 'clothing',
  'lengzh': 'length',
  'zhursday': 'thursday',
  'zhomas': 'thomas',
  'smizh': 'smith',
  'zhank': 'thank',
  'zherefore': 'therefore',
  'zhu': 'thu',
  'earzh': 'earth',
  'zhus': 'thus',
  'mozher': 'mother',
  'auzhority': 'authority',
  'norzhern': 'northern',
  'ozherwise': 'otherwise',
  'auzhors': 'authors',
  'souzhern': 'southern',
  'youzh': 'youth',
  'zhroughout': 'throughout',
  'zheory': 'theory',
  'fazher': 'father',
  'worzh': 'worth',
  'zhemselves': 'themselves',
  'zh': 'th',
  'monzhly': 'monthly',
  'pazh': 'path',
  'leazher': 'leather',
  'zhinking': 'thinking',
  'zhousands': 'thousands',
  'zherapy': 'therapy',
  'zhoughts': 'thoughts',
  'zheme': 'theme',
  'birzh': 'birth',
  'faizh': 'faith',
  'truzh': 'truth',
  'brozher': 'brother',
  'zheatre': 'theatre',
  'depzh': 'depth',
  'nezherlands': 'netherlands',
  'bazh': 'bath',
  'zheater': 'theater',
  'healzhy': 'healthy',
  'birzhday': 'birthday',
  'mazh': 'math',
  'healzhcare': 'healthcare',
  'strengzh': 'strength',
  'clozhes': 'clothes',
  'fourzh': 'fourth',
  'widzh': 'width',
  'elizabezh': 'elizabeth',
  'mazhematics': 'mathematics',
  'zhailand': 'thailand',
  'bluetoozh': 'bluetooth',
  'auzhorities': 'authorities',
  'auzhorized': 'authorized',
  'mouzh': 'mouth',
  'neizher': 'neither',
  'zhreads': 'threads',
  'brozhers': 'brothers',
  'cazholic': 'catholic',
  'norzhwest': 'northwest',
  'forzh': 'forth',
  'zhemes': 'themes',
  'smoozh': 'smooth',
  'zhreat': 'threat',
  'bazhroom': 'bathroom',
  'zhousand': 'thousand',
  'pyzhon': 'python',
  'ezhics': 'ethics',
  'matzhew': 'matthew',
  'anzhony': 'anthony',
  'zhongs': 'thongs',
  'algorizhm': 'algorithm',
  'ezhnic': 'ethnic',
  'fifzh': 'fifth',
  'zhin': 'thin',
  'ezhernet': 'ethernet',
  'zhrow': 'throw',
  'zhompson': 'thompson',
  'arzhur': 'arthur',
  'souzhwest': 'southwest',
  'keizh': 'keith',
  'zhroat': 'throat',
  'wealzh': 'wealth',
  'zhumbnail': 'thumbnail',
  'jonazhan': 'jonathan',
  'azhletic': 'athletic',
  'zhermal': 'thermal',
  'zhick': 'thick',
  'zhai': 'thai',
  'auzhentication': 'authentication',
  'bandwidzh': 'bandwidth',
  'zheft': 'theft',
  'azhletics': 'athletics',
  'souzheast': 'southeast',
  'zhirty': 'thirty',
  'zhou': 'thou',
  'furzhermore': 'furthermore',
  'deazhs': 'deaths',
  'commonwealzh': 'commonwealth',
  'zhumbs': 'thumbs',
  'mezhodology': 'methodology',
  'gazhering': 'gathering',
  'mazhematical': 'mathematical',
  'azhens': 'athens',
  'norzheast': 'northeast',
  'zhreshold': 'threshold',
  'ezhical': 'ethical',
  'zhesis': 'thesis',
  'zhru': 'thru',
  'zheoretical': 'theoretical',
  'zhereof': 'thereof',
  'auzhentic': 'authentic',
  'breazh': 'breath',
  'auzhorization': 'authorization',
  'algorizhms': 'algorithms',
  'zhinks': 'thinks',
  'zhats': 'thats',
  'zhy': 'thy',
  'sixzh': 'sixth',
  'zhreats': 'threats',
  'teezh': 'teeth',
  'clozh': 'cloth',
  'kennezh': 'kenneth',
  'cazherine': 'catherine',
  'zheaters': 'theaters',
  'zhreaded': 'threaded',
  'mozhers': 'mothers',
  'synzhesis': 'synthesis',
  'zhomson': 'thomson',
  'heazher': 'heather',
  'zhumbnails': 'thumbnails',
  'zherapeutic': 'therapeutic',
  'zheories': 'theories',
  'pazhs': 'paths',
  'lizhuania': 'lithuania',
  'gazhered': 'gathered',
  'arzhritis': 'arthritis',
  'neverzheless': 'nevertheless',
  'zheorem': 'theorem',
  'zhee': 'thee',
  'ruzh': 'ruth',
  'plymouzh': 'plymouth',
  'marzha': 'martha',
  'zhereby': 'thereby',
  'pazhology': 'pathology',
  'zhreesome': 'threesome',
  'wizhdrawal': 'withdrawal',
  'timozhy': 'timothy',
  'zhumbzilla': 'thumbzilla',
  'zhehun': 'thehun',
  'perzh': 'perth',
  'aszhma': 'asthma',
  'zhong': 'thong',
  'boozh': 'booth',
  'gazher': 'gather',
  'bazhrooms': 'bathrooms',
  'zhrows': 'throws',
  'beneazh': 'beneath',
  'strengzhen': 'strengthen',
  'sevenzh': 'seventh',
  'zhumb': 'thumb',
  'ezhiopia': 'ethiopia',
  'azhletes': 'athletes',
  'synzhetic': 'synthetic',
  'strengzhs': 'strengths',
  'zhreatened': 'threatened',
  'zhesaurus': 'thesaurus',
  'rhyzhm': 'rhythm',
  'worzhy': 'worthy',
  'breazhing': 'breathing',
  'zhickness': 'thickness',
  'zhanksgiving': 'thanksgiving',
  'gozhic': 'gothic',
  'kazhy': 'kathy',
  'bezh': 'beth',
  'zhoroughly': 'thoroughly',
  'zhunder': 'thunder',
  'nazhan': 'nathan',
  'earzhquake': 'earthquake',
  'zheology': 'theology',
  'luzher': 'luther',
  'hypozhesis': 'hypothesis',
  'marazhon': 'marathon',
  'zhrown': 'thrown',
  'heazh': 'heath',
  'myzh': 'myth',
  'unauzhorized': 'unauthorized',
  'mozherboard': 'motherboard',
  'fazhers': 'fathers',
  'zhinkpad': 'thinkpad',
  'bazhs': 'baths',
  'cazhedral': 'cathedral',
  'anzhropology': 'anthropology',
  'toozh': 'tooth',
  'hypozhetical': 'hypothetical',
  'smizhsonian': 'smithsonian',
  'zhriller': 'thriller',
  'zherapist': 'therapist',
  'zhereafter': 'thereafter',
  'souzhampton': 'southampton',
  'portsmouzh': 'portsmouth',
  'zhrowing': 'throwing',
  'zhorough': 'thorough',
  'sympazhy': 'sympathy',
  'zhreatening': 'threatening',
  'bozher': 'bother',
  'strengzhening': 'strengthening',
  'zheta': 'theta'
}

const textNodeDescendants = node => [
    ...node.childNodes, ...Array.from(node.childNodes)
    .flatMap(child => textNodeDescendants(child))
  ].filter(child => child.nodeName === '#text');
const caseMatch = (str0, str1) => {
  const cases = [...str0].map(char => char === char.toUpperCase());
  return [...str1].map((char, i) => cases[i] ? char.toUpperCase() : char.toLowerCase()).join('');
};
const replacer = word => {
  if (word.toLowerCase() in map) return caseMatch(word, map[word.toLowerCase()]);
  else return word;
};

const translatePosts = posts => {
  for (const post of posts) {
    post.setAttribute(customAttribute, '');
    if (!post.textContent.toLowerCase().includes(phenome)) continue;
    const translatableNodes = textNodeDescendants(post).filter(({ textContent }) => textContent.toLowerCase().includes(phenome));
    console.log(translatableNodes);
    translatableNodes.forEach(function(node) { node.textContent = node.textContent.replace(regex, replacer); });
  }
};

export const main = async () => {
  ({ reverseMode } = await getOptions('yinglation'));

  if (reverseMode) {
    Object.entries(map).forEach(([key, value]) => map[value] = key);
    phenome = 'th'
    regex = /(\w*(?:th)\w*)/gi;
  }
  postFunction.start(translatePosts, `:not([${customAttribute}])`);
}
export const clean = async () => {
  $(`[${customAttribute}]`).removeAttr(customAttribute);
  postFunction.stop(translatePosts);
}
